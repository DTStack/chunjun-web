"use strict";(self.webpackChunkchunjun_web=self.webpackChunkchunjun_web||[]).push([[4808],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return N}});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=l.createContext({}),p=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return l.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),k=p(a),N=n,d=k["".concat(o,".").concat(N)]||k[N]||m[N]||r;return a?l.createElement(d,i(i({ref:t},s),{},{components:a})):l.createElement(d,i({ref:t},s))}));function N(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=k;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:n,i[1]=u;for(var p=2;p<r;p++)i[p]=a[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8648:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return N},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var l=a(7462),n=a(3366),r=(a(7294),a(3905)),i=["components"],u={},o="MySQL Binlog Source",p={unversionedId:"chunjunDocs/connectors/binlog/binlog-source",id:"chunjunDocs/connectors/binlog/binlog-source",title:"MySQL Binlog Source",description:"1. Introduction",source:"@site/docs/chunjunDocs/connectors/binlog/binlog-source.md",sourceDirName:"chunjunDocs/connectors/binlog",slug:"/chunjunDocs/connectors/binlog/binlog-source",permalink:"/chunjun-web/en/docs/chunjunDocs/connectors/binlog/binlog-source",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/chunjunDocs/connectors/binlog/binlog-source.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Restore",permalink:"/chunjun-web/en/docs/chunjunDocs/restore"},next:{title:"Clickhouse Lookup",permalink:"/chunjun-web/en/docs/chunjunDocs/connectors/clickhouse/clickhouse-lookup"}},s={},m=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"2. Supported Versions",id:"2-supported-versions",level:2},{value:"3. Plugin Name",id:"3-plugin-name",level:2},{value:"4. Database Configuration",id:"4-database-configuration",level:2},{value:"4.1 Change Configuration",id:"41-change-configuration",level:3},{value:"4.2. Add Permissions",id:"42-add-permissions",level:3},{value:"5. Parameter Description",id:"5-parameter-description",level:2},{value:"5.1 Sync",id:"51-sync",level:3},{value:"5.2 SQL",id:"52-sql",level:3},{value:"6. Data Structure",id:"6-data-structure",level:2},{value:"7. Data Types",id:"7-data-types",level:2},{value:"8. Script Example",id:"8-script-example",level:2}],k={toc:m};function N(e){var t=e.components,a=(0,n.Z)(e,i);return(0,r.kt)("wrapper",(0,l.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mysql-binlog-source"},"MySQL Binlog Source"),(0,r.kt)("h2",{id:"1-introduction"},"1. Introduction"),(0,r.kt)("p",null,"The MySQL Binlog plugin uses the Canal component to capture the changed data from MySQL in real-time. Currently, the\nsink-plugin does not support data restoration, and only support to write changed log data."),(0,r.kt)("h2",{id:"2-supported-versions"},"2. Supported Versions"),(0,r.kt)("p",null,"MySQL 5.1.5 and above, TiDB 3.0.10 and later"),(0,r.kt)("h2",{id:"3-plugin-name"},"3. Plugin Name"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Sync"),(0,r.kt)("th",{parentName:"tr",align:null},"binlogsource\u3001binlogreader"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SQL"),(0,r.kt)("td",{parentName:"tr",align:null},"binlog-x")))),(0,r.kt)("h2",{id:"4-database-configuration"},"4. Database Configuration"),(0,r.kt)("h3",{id:"41-change-configuration"},"4.1 Change Configuration"),(0,r.kt)("p",null,"MySQL binlog_format needs to be modified to ROW, add the following configuration under ","[mysqld]"," in the /etc/my.cnf file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"server_id\n=109\nlog_bin = /var/lib/mysql/mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 30\n")),(0,r.kt)("h3",{id:"42-add-permissions"},"4.2. Add Permissions"),(0,r.kt)("p",null,"MySQL Binlog requires three permissions: SELECT, REPLICATION SLAVE, REPLICATION CLIENT"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"GRANT\nSELECT, REPLICATION SLAVE, REPLICATION CLIENT\nON *.* TO 'canal'@'%' IDENTIFIED BY 'canal';\n")),(0,r.kt)("p",null,"-When the SELECT permission is missing, the error is reported as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException:\nAccess denied for user'canal'@'%' to database'binlog'\n")),(0,r.kt)("p",null,"-When REPLICATION SLAVE permission is missing, the error is reported as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"java.io.IOException:\nError When doing Register slave:ErrorPacket [errorNumber=1045, fieldCount=-1, message=Access denied for user'canal'@'%'\n")),(0,r.kt)("p",null,"-When REPLICATION CLIENT permission is missing, the error is reported as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException:\nAccess denied; you need (at least one of) the SUPER, REPLICATION CLIENT privilege(s) for this operation\n")),(0,r.kt)("p",null,"Why does Binlog need these permissions:"),(0,r.kt)("p",null,"-Select permission means are allowed to view data onto the table -Replication client permission means are allowed to\nexecute the show master status, show slave status, and show binary logs commands -Replication slave permission means\nthat the slave host is allowed to connect to the master through this user in order to establish a master-slave\nreplication relationship"),(0,r.kt)("h2",{id:"5-parameter-description"},"5. Parameter Description"),(0,r.kt)("h3",{id:"51-sync"},"5.1 Sync"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"jdbcUrl"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: jdbc url of MySQL database, reference\ndocument: ","[Mysql official document]","(",(0,r.kt)("a",{parentName:"li",href:"http://dev.mysql.com/doc/connector-"},"http://dev.mysql.com/doc/connector-")," j/en/connector- j- reference-\nconfiguration- properties.html)"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"username"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The username of the data source"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"password"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The password of the username specified by the data source"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"host"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The ip of the machine where the MySQL slave is started"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"port"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Port to start MySQL slave"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 3306")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"table"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The data table to be parsed."),(0,r.kt)("li",{parentName:"ul"},"Note: After specifying this parameter, the filter parameter will be invalid, the table and filter are empty,\nlisten to all tables under the schema in jdbcUrl"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: list\\<string",">"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Perl regular expression for filtering table names"),(0,r.kt)("li",{parentName:"ul"},"Note: both table and filter are empty, listen to all tables under the schema in jdbcUrl"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none"),(0,r.kt)("li",{parentName:"ul"},"example:"),(0,r.kt)("li",{parentName:"ul"},"All tables: ",(0,r.kt)("inlineCode",{parentName:"li"},".*")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".*\\\\..*")),(0,r.kt)("li",{parentName:"ul"},"All tables under canal schema: ",(0,r.kt)("inlineCode",{parentName:"li"},"canal\\\\..*")),(0,r.kt)("li",{parentName:"ul"},"Tables starting with canal under canal: ",(0,r.kt)("inlineCode",{parentName:"li"},"canal\\\\.canal.*")),(0,r.kt)("li",{parentName:"ul"},"A table under the canal schema: ",(0,r.kt)("inlineCode",{parentName:"li"},"canal.test1"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"cat"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The type of data update that needs to be parsed, including insert, update, and delete"),(0,r.kt)("li",{parentName:"ul"},"Note: Fill in the format separated by commas. If it is empty, parse all data update types"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"start"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The starting position of the binlog file to be read"),(0,r.kt)("li",{parentName:"ul"},"Note: If it is empty, it will be consumed from the current position, and the priority of timestamp is higher than\njournalName+position"),(0,r.kt)("li",{parentName:"ul"},"Parameters:"),(0,r.kt)("li",{parentName:"ul"},"timestamp: timestamp, the start point of collection is consumed from the specified timestamp;"),(0,r.kt)("li",{parentName:"ul"},"journalName: file name, the start point of collection is consumed from the beginning of the specified file;"),(0,r.kt)("li",{parentName:"ul"},"position: the specified position of the file, the start point of collection is consumed from the specified\nposition of the specified file"),(0,r.kt)("li",{parentName:"ul"},"Field type: map"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"pavingData"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to flatten the parsed json data, see ",(0,r.kt)("a",{parentName:"li",href:"#%E5%85%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"},"\u516d\u3001Data structure")),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"splitUpdate"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: When the data update type is update, whether to split the update into two data,\nsee ",(0,r.kt)("a",{parentName:"li",href:"#%E5%85%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"},"\u516d\u3001Data structure")),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: false")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"timestampFormat"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Specify the timestamp format used for input and output, optional values: ",(0,r.kt)("inlineCode",{parentName:"li"},"SQL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ISO_8601")),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: SQL")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"slaveId"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The ID of the slave server"),(0,r.kt)("li",{parentName:"ul"},"Note: The same MYSQL replication group cannot be duplicated"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: long"),(0,r.kt)("li",{parentName:"ul"},"Default value: new Object().hashCode()")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connectionCharset"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: encoding information"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: UTF- 8")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"detectingEnable"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to turn on the heartbeat"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"detectingSQL"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Heartbeat SQL"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: SELECT CURRENT_DATE")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"enableTsdb"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to enable the ability of time series structure"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"bufferSize"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Concurrent cache size"),(0,r.kt)("li",{parentName:"ul"},"Note: Must be a power of 2"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Default value: 1024")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"parallel"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to enable parallel parsing of binlog logs"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"parallelThreadSize"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Parallel parsing of binlog log threads"),(0,r.kt)("li",{parentName:"ul"},"Note: Only when paraller is set to true will it take effect"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 2")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"isGTIDMode"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to enable gtid mode"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: false")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"queryTimeOut"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: After sending data through the TCP connection (here is the SQL to be executed), the timeout period\nfor waiting for a response, in milliseconds"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 300000")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connectTimeOut"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The timeout period for the database driver (mysql-connector-java) to establish a TCP connection with\nthe mysql server, in milliseconds"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 60000")))),(0,r.kt)("h3",{id:"52-sql"},"5.2 SQL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: jdbc url of MySQL database, reference\ndocument: ","[Mysql official document]","(",(0,r.kt)("a",{parentName:"li",href:"http://dev.mysql.com/doc/connector-"},"http://dev.mysql.com/doc/connector-")," j/en/connector- j- reference-\nconfiguration- properties.html)"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"username"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The username of the data source"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"password"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The password of the username specified by the data source"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"host"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The ip of the machine where the MySQL slave is started"),(0,r.kt)("li",{parentName:"ul"},"Required: Yes"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"port"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Port to start MySQL slave"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 3306")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"table"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The data table to be parsed."),(0,r.kt)("li",{parentName:"ul"},"Note: After specifying this parameter, the filter parameter will be invalid, and the SQL task only supports\nmonitoring a single table"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Perl regular expression for filtering table names"),(0,r.kt)("li",{parentName:"ul"},"Note: The SQL task only supports monitoring a single table"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none"),(0,r.kt)("li",{parentName:"ul"},"Example: a table under the canal schema: ",(0,r.kt)("inlineCode",{parentName:"li"},"canal.test1"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"cat"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The type of data update that needs to be parsed, including insert, update, and delete"),(0,r.kt)("li",{parentName:"ul"},"Note: Fill in the format separated by commas. If it is empty, parse all data update types"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"timestamp"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The starting position and timestamp of the binlog file to be read, the start point of collection is\nconsumed from the specified timestamp;"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"journal- name"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The start position of the binlog file to be read, the file name, and the start point of collection is\nconsumed from the start of the specified file;"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"position"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The start position of the binlog file to be read, the specified position of the file, the start point\nof collection is consumed from the specified position of the specified file"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: none")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connection- charset"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: encoding information"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: UTF- 8")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"detecting- enable"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to turn on the heartbeat"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"detecting- sql"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Heartbeat SQL"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: SELECT CURRENT_DATE")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"enable- tsdb"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to enable the ability of time series structure"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"buffer- size"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Concurrent cache size"))),(0,r.kt)("li",{parentName:"ul"},"Note: Must be a power of 2",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Default value: 1024")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"parallel"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to enable parallel parsing of binlog logs"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: true")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"parallel- thread- size"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Parallel parsing of binlog log threads"),(0,r.kt)("li",{parentName:"ul"},"Note: Only when parallel is set to true will it take effect"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 2")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"is- gtid- mode"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Whether to enable gtid mode"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: boolean"),(0,r.kt)("li",{parentName:"ul"},"Default value: false")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"query-time-out"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: After sending data through the TCP connection (here is the SQL to be executed), the timeout period\nfor waiting for a response, in milliseconds"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 300000")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connect-time-out"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: The timeout period for the database driver (mysql-connector-java) to establish a TCP connection with\nthe mysql server, in milliseconds"),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: int"),(0,r.kt)("li",{parentName:"ul"},"Default value: 60000")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"timestamp- format.standard"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Description: Same as the ",(0,r.kt)("inlineCode",{parentName:"li"},"timestampFormat")," parameter in Sync, specify the timestamp format used for input and\noutput, optional values: ",(0,r.kt)("inlineCode",{parentName:"li"},"SQL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ISO_8601")),(0,r.kt)("li",{parentName:"ul"},"Required: No"),(0,r.kt)("li",{parentName:"ul"},"Field type: string"),(0,r.kt)("li",{parentName:"ul"},"Default value: SQL")))),(0,r.kt)("h2",{id:"6-data-structure"},"6. Data Structure"),(0,r.kt)("p",null,"Execute at 2020-01-01 12:30:00 (time stamp: 1577853000000):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO `tudou`.`kudu`(`id`, `user_id`, `name`)\nVALUES (1, 1, 'a');\n")),(0,r.kt)("p",null,"Execute at 2020-01-01 12:31:00 (time stamp: 1577853060000):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE\nFROM `tudou`.`kudu`\nWHERE `id` = 1\n  AND `user_id` = 1\n  AND `name` = 'a';\n")),(0,r.kt)("p",null,"Execute at 2020-01-01 12:32:00 (time stamp: 1577853180000):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE `tudou`.`kudu`\nSET `id`      = 2,\n    `user_id` = 2,\n    `name`    ='b'\nWHERE `id` = 1\n  AND `user_id` = 1\n  AND `name` = 'a';\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"pavingData = true, splitUpdate = false The data in RowData are as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//schema, table, ts, opTime, type, before_id, before_user_id, before_name, after_id, after_user_id, after_name\n["tudou", "kudu", 6760525407742726144, 1577853000000, "INSERT", null, null, null, 1, 1, "a"]\n["tudou", "kudu", 6760525407742726144, 1577853060000, "DELETE", 1, 1, "a", null, null, null]\n["tudou", "kudu", 6760525407742726144, 1577853180000, "UPDATE", 1, 1, "a", 2, 2, "b"]\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"pavingData = false, splitUpdate = false The data in RowData are as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//schema, table, ts, opTime, type, before, after\n["tudou", "kudu", 6760525407742726144, 1577853000000, "INSERT", null, {"id":1, "user_id":1, "name":"a"}]\n["tudou", "kudu", 6760525407742726144, 1577853060000, "DELETE", {"id":1, "user_id":1, "name":"a"}, null]\n["tudou", "kudu", 6760525407742726144, 1577853180000, "UPDATE", {"id":1, "user_id":1, "name":"a"}, {"id":2, "user_id": 2, "name":"b"}]\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"pavingData = true, splitUpdate = true The data in RowData are as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//schema, table, ts, opTime, type, before_id, before_user_id, before_name, after_id, after_user_id, after_name\n["tudou", "kudu", 6760525407742726144, 1577853000000, "INSERT", null, null, null, 1, 1, "a"]\n["tudou", "kudu", 6760525407742726144, 1577853060000, "DELETE", 1, 1, "a", null, null, null]\n\n//schema, table, ts, opTime, type, before_id, before_user_id, before_name\n["tudou", "kudu", 6760525407742726144, 1577853180000, "UPDATE_BEFORE", 1, 1, "a"]\n\n//schema, table, ts, opTime, type, after_id, after_user_id, after_name\n["tudou", "kudu", 6760525407742726144, 1577853180000, "UPDATE_AFTER", 2, 2, "b"]\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"pavingData = false, splitUpdate = true The data in RowData are as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//schema, table, ts, opTime, type, before, after\n["tudou", "kudu", 6760525407742726144, 1577853000000, "INSERT", null, {"id":1, "user_id":1, "name":"a"}]\n["tudou", "kudu", 6760525407742726144, 1577853060000, "DELETE", {"id":1, "user_id":1, "name":"a"}, null]\n//schema, table, ts, opTime, type, before\n["tudou", "kudu", 6760525407742726144, 1577853180000, "UPDATE_BEFORE", {"id":1, "user_id":1, "name":"a"}]\n//schema, table, ts, opTime, type, after\n["tudou", "kudu", 6760525407742726144, 1577853180000, "UPDATE_AFTER", {"id":2, "user_id":2, "name":"b"}]\n')),(0,r.kt)("p",null,"-type: change type, INSERT, UPDATE, DELETE -opTime: the execution time of SQL in the database -ts: Self-incrementing ID,\nnot repeated, can be used for sorting, after decoding, it is the event time of FlinkX, the decoding rules are as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'long id=Long.parseLong("6760525407742726144");\n        long res=id>>22;\n        DateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n        System.out.println(sdf.format(res)); //2021-01-28 19:54:21\n')),(0,r.kt)("h2",{id:"7-data-types"},"7. Data Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"SUPPORTED"),(0,r.kt)("th",{parentName:"tr",align:null},"DATA TYPE"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"YES"),(0,r.kt)("td",{parentName:"tr",align:null},"BIT, TINYINT, SMALLINT, MEDIUMINT, INT, INT24, INTEGER, FLOAT, DOUBLE, REAL, LONG, BIGINT, DECIMAL, NUMERIC, CHAR, VARCHAR, TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT, ENUM, SET, JSON, DATE, TIME, TIMESTAMP, DATETIME, YEAR, TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB, GEOMETRY, BINARY, VARBINARY")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NO"),(0,r.kt)("td",{parentName:"tr",align:null},"None")))),(0,r.kt)("h2",{id:"8-script-example"},"8. Script Example"),(0,r.kt)("p",null,"See the ",(0,r.kt)("inlineCode",{parentName:"p"},"flinkx-examples")," folder in the project."))}N.isMDXComponent=!0}}]);